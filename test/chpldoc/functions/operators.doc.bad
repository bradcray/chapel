.. default-domain:: chpl

.. module:: operators.doc

operators.doc
=============
**Usage**

.. code-block:: chapel

   use operators.doc;


or

.. code-block:: chapel

   import operators.doc;

.. class:: Foo

   .. attribute:: var x: int

.. class:: Foo2

   .. attribute:: var x: bool

.. function:: proc +(a: Foo, b: Foo)

.. function:: proc chpl_align(r: range(?i), count: Foo)

.. function:: proc &(lhs: Foo2, rhs: Foo2)

.. function:: proc &=(ref lhs: Foo2, rhs: Foo2)

.. function:: proc chpl_by(r: range(?i), count: Foo)

.. function:: proc :(rhs: Foo, type t: Bar)

.. function:: proc #(r: range(?i), count: Foo)

.. function:: proc /=(ref lhs: Foo, rhs: Foo)

.. function:: proc /(lhs: Foo, rhs: Foo)

.. function:: proc ==(lhs: Foo, rhs: Foo)

.. function:: proc **=(ref lhs: Foo, rhs: Foo)

.. function:: proc **(lhs: Foo, rhs: Foo)

.. function:: proc >(lhs: Foo, rhs: Foo)

.. function:: proc >=(lhs: Foo, rhs: Foo)

.. function:: proc !=(lhs: Foo, rhs: Foo)

.. function:: proc <~>(const ref ch: channel, const x: Foo) const ref throws

.. function:: proc <(lhs: Foo, rhs: Foo)

.. function:: proc <=(lhs: Foo, rhs: Foo)

.. function:: proc -=(ref lhs: Foo, rhs: Foo)

.. function:: proc %(lhs: Foo, rhs: Foo)

.. function:: proc %=(ref lhs: Foo, rhs: Foo)

.. function:: proc *(lhs: Foo, rhs: Foo)

.. function:: proc -(arg: Foo)

.. function:: proc !(arg: Foo2)

.. function:: proc |(lhs: Foo2, rhs: Foo2)

.. function:: proc |=(ref lhs: Foo2, rhs: Foo2)

.. function:: proc +=(ref lhs: Foo, rhs: Foo)

.. function:: proc +(arg: Foo)

.. function:: proc <<(lhs: Foo, rhs: Foo)

.. function:: proc <<=(ref lhs: Foo, rhs: Foo)

.. function:: proc >>(lhs: Foo, rhs: Foo)

.. function:: proc >>=(ref lhs: Foo, rhs: Foo)

.. function:: proc -(lhs: Foo, rhs: Foo)

.. function:: proc <=>(ref lhs: owned nilable Foo, ref rhs: owned nilable Foo)

.. function:: proc *=(ref lhs: Foo, rhs: Foo)

.. function:: proc ~(arg: Foo)

.. function:: proc ^(lhs: Foo2, rhs: Foo2)

.. function:: proc ^=(ref lhs: Foo2, rhs: Foo2)

.. record:: Bar

   .. attribute:: var y: int

.. method:: proc Bar.init=(other: Bar)

.. function:: proc =(ref lhs: Bar, rhs: Bar)

