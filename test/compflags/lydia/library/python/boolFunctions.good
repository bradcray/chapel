from libc.stdint cimport *
from chplrt cimport *

cdef extern from "boolFunctions.h":
	void chpl__init_boolFunctions(int64_t _ln, int32_t _fn);
	void takesBool(bint x);
	bint getBool();
	bint takeAndReturn(bint x);
from chplrt cimport chpl_library_init, chpl_library_finalize, chpl_external_array, chpl_make_external_array, chpl_make_external_array_ptr, chpl_free_external_array
from chpl_boolFunctions cimport chpl__init_boolFunctions, takesBool as chpl_takesBool, getBool as chpl_getBool, takeAndReturn as chpl_takeAndReturn

import numpy
cimport numpy

def chpl_setup():
	cdef char** args = ['boolFunctions']
	chpl_library_init(1, args)
	chpl__init_boolFunctions(1, 1)

def chpl_cleanup():
	chpl_library_finalize()

def takesBool(bint x):
	chpl_takesBool(x)

def getBool():
	ret = chpl_getBool()
	return ret

def takeAndReturn(bint x):
	ret = chpl_takeAndReturn(x)
	return ret
from distutils.core import setup
from distutils.core import Extension
from Cython.Build import cythonize
import numpy

setup(name = 'boolFunctions library',
	ext_modules = cythonize(
		Extension("boolFunctions",
			include_dirs=[numpy.get_include()],
			sources=["boolFunctions.pyx"],
			libraries=["boolFunctions"] + chpl_libraries)))
