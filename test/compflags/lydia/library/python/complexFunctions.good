from libc.stdint cimport *
from chplrt cimport *

cdef extern from "complexFunctions.h":
	void chpl__init_complexFunctions(int64_t _ln, int32_t _fn);
	void takesComplex(double complex x);
	double complex getComplex();
	double complex takeAndReturn(double complex x);
from chplrt cimport chpl_library_init, chpl_library_finalize, chpl_external_array, chpl_make_external_array, chpl_make_external_array_ptr, chpl_free_external_array
from chpl_complexFunctions cimport chpl__init_complexFunctions, takesComplex as chpl_takesComplex, getComplex as chpl_getComplex, takeAndReturn as chpl_takeAndReturn

import numpy
cimport numpy

def chpl_setup():
	cdef char** args = ['complexFunctions']
	chpl_library_init(1, args)
	chpl__init_complexFunctions(1, 1)

def chpl_cleanup():
	chpl_library_finalize()

def takesComplex(numpy.complex128 x):
	chpl_takesComplex(x)

def getComplex():
	ret = chpl_getComplex()
	return ret

def takeAndReturn(numpy.complex128 x):
	ret = chpl_takeAndReturn(x)
	return ret
from distutils.core import setup
from distutils.core import Extension
from Cython.Build import cythonize
import numpy

setup(name = 'complexFunctions library',
	ext_modules = cythonize(
		Extension("complexFunctions",
			include_dirs=[numpy.get_include()],
			sources=["complexFunctions.pyx"],
			libraries=["complexFunctions"] + chpl_libraries)))
