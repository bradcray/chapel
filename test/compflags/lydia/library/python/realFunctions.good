from libc.stdint cimport *
from chplrt cimport *

cdef extern from "realFunctions.h":
	void chpl__init_realFunctions(int64_t _ln, int32_t _fn);
	void takesReal(double x);
	double getReal();
	double takeAndReturn(double x);
from chplrt cimport chpl_library_init, chpl_library_finalize, chpl_external_array, chpl_make_external_array, chpl_make_external_array_ptr, chpl_free_external_array
from chpl_realFunctions cimport chpl__init_realFunctions, takesReal as chpl_takesReal, getReal as chpl_getReal, takeAndReturn as chpl_takeAndReturn

import numpy
cimport numpy

def chpl_setup():
	cdef char** args = ['realFunctions']
	chpl_library_init(1, args)
	chpl__init_realFunctions(1, 1)

def chpl_cleanup():
	chpl_library_finalize()

def takesReal(float x):
	chpl_takesReal(x)

def getReal():
	ret = chpl_getReal()
	return ret

def takeAndReturn(float x):
	ret = chpl_takeAndReturn(x)
	return ret
from distutils.core import setup
from distutils.core import Extension
from Cython.Build import cythonize
import numpy

setup(name = 'realFunctions library',
	ext_modules = cythonize(
		Extension("realFunctions",
			include_dirs=[numpy.get_include()],
			sources=["realFunctions.pyx"],
			libraries=["realFunctions"] + chpl_libraries)))
