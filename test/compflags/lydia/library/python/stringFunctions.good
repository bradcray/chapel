from libc.stdint cimport *
from chplrt cimport *

cdef extern from "stringFunctions.h":
	void chpl__init_stringFunctions(int64_t _ln, int32_t _fn);
	void takesString(char * x);
	char * getString();
	char * takeAndReturn(char * x);
from chplrt cimport chpl_library_init, chpl_library_finalize, chpl_external_array, chpl_make_external_array, chpl_make_external_array_ptr, chpl_free_external_array
from chpl_stringFunctions cimport chpl__init_stringFunctions, takesString as chpl_takesString, getString as chpl_getString, takeAndReturn as chpl_takeAndReturn

import numpy
cimport numpy

def chpl_setup():
	cdef char** args = ['stringFunctions']
	chpl_library_init(1, args)
	chpl__init_stringFunctions(1, 1)

def chpl_cleanup():
	chpl_library_finalize()

def takesString(bytes x):
	cdef const char* chpl_x = x
	chpl_takesString(chpl_x)

def getString():
	ret = chpl_getString()
	return ret

def takeAndReturn(bytes x):
	cdef const char* chpl_x = x
	ret = chpl_takeAndReturn(chpl_x)
	return ret
from distutils.core import setup
from distutils.core import Extension
from Cython.Build import cythonize
import numpy

setup(name = 'stringFunctions library',
	ext_modules = cythonize(
		Extension("stringFunctions",
			include_dirs=[numpy.get_include()],
			sources=["stringFunctions.pyx"],
			libraries=["stringFunctions"] + chpl_libraries)))
