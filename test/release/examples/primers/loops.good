Within the first while-loop, i is 1
Within the first while-loop, i is 2
Within the first while-loop, i is 4
Within the first while-loop, i is 8
Within the first while-loop, i is 16
Within the first while-loop, i is 32
Within the first while-loop, i is 64
At the end of the second while-loop, j is 243
Within the third while-loop, k is 1
Within the third while-loop, k is 4
Within the third while-loop, k is 16
Within the third while-loop, k is 64
Within the fourth while-loop, i is 1
Within the fourth while-loop, i is 5
Within the fourth while-loop, i is 25
Within the fourth while-loop, i is 125
Within the first for-loop, i is 1
Within the first for-loop, i is 2
Within the first for-loop, i is 3
Within the first for-loop, i is 1
Within the first for-loop, i is 2
Within the first for-loop, i is 3
The second for-loop is doubling 1.2
The second for-loop is doubling 3.4
The second for-loop is doubling 5.6
The second for-loop is doubling 7.8
After the second for-loop, A is: 2.4 6.8 11.2 15.6
In the third for-loop, element 0 of A is 2.4
In the third for-loop, element 1 of A is 6.8
In the third for-loop, element 2 of A is 11.2
In the third for-loop, element 3 of A is 15.6
The fourth for-loop got index (1, 1) from Dom2D
The fourth for-loop got index (1, 2) from Dom2D
The fourth for-loop got index (1, 3) from Dom2D
The fourth for-loop got index (2, 1) from Dom2D
The fourth for-loop got index (2, 2) from Dom2D
The fourth for-loop got index (2, 3) from Dom2D
The fourth for-loop got index (3, 1) from Dom2D
The fourth for-loop got index (3, 2) from Dom2D
The fourth for-loop got index (3, 3) from Dom2D
The fifth for-loop got row = 1 and col = 1
The fifth for-loop got row = 1 and col = 2
The fifth for-loop got row = 1 and col = 3
The fifth for-loop got row = 2 and col = 1
The fifth for-loop got row = 2 and col = 2
The fifth for-loop got row = 2 and col = 3
The fifth for-loop got row = 3 and col = 1
The fifth for-loop got row = 3 and col = 2
The fifth for-loop got row = 3 and col = 3
Within the first zippered for-loop, idx is (1, 1, 2.4)
Within the first zippered for-loop, idx is (2, 3, 6.8)
Within the first zippered for-loop, idx is (3, 5, 11.2)
Within the first zippered for-loop, idx is (4, 7, 15.6)
Within the second zippered for-loop, i, j, and a are: (1, 1, 2.4)
Within the second zippered for-loop, i, j, and a are: (2, 3, 6.8)
Within the second zippered for-loop, i, j, and a are: (3, 5, 11.2)
Within the second zippered for-loop, i, j, and a are: (4, 7, 15.6)
One component of 'tup' has type int(64)
One component of 'tup' has type real(64)
One component of 'tup' has type string
Component 0 of 'tup' has type int(64)
Component 1 of 'tup' has type real(64)
Component 2 of 'tup' has type string
After our first foreach-loop, A is: 4.8 13.6 22.4 31.2
After our first zippered foreach-loop, A is: 4.81 13.62 22.43 31.24
After the forall loop over a range, B is: 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0
After the forall loop over a domain, B is: 13.62 22.43 31.24 4.81 13.62 22.43 31.24 4.81
After the forall loop over an array, B is: -13.62 -22.43 -31.24 -4.81 -13.62 -22.43 -31.24 -4.81
After the forall loop over a distributed domain, C is:
1.001 1.002 1.003 1.004 101.005 101.006 101.007 101.008
2.001 2.002 2.003 2.004 102.005 102.006 102.007 102.008
3.001 3.002 3.003 3.004 103.005 103.006 103.007 103.008
4.001 4.002 4.003 4.004 104.005 104.006 104.007 104.008
205.001 205.002 205.003 205.004 305.005 305.006 305.007 305.008
206.001 206.002 206.003 206.004 306.005 306.006 306.007 306.008
207.001 207.002 207.003 207.004 307.005 307.006 307.007 307.008
208.001 208.002 208.003 208.004 308.005 308.006 308.007 308.008
After the forall loop over a distributed array, C is:
2.002 2.004 2.006 2.008 202.01 202.012 202.014 202.016
4.002 4.004 4.006 4.008 204.01 204.012 204.014 204.016
6.002 6.004 6.006 6.008 206.01 206.012 206.014 206.016
8.002 8.004 8.006 8.008 208.01 208.012 208.014 208.016
410.002 410.004 410.006 410.008 610.01 610.012 610.014 610.016
412.002 412.004 412.006 412.008 612.01 612.012 612.014 612.016
414.002 414.004 414.006 414.008 614.01 614.012 614.014 614.016
416.002 416.004 416.006 416.008 616.01 616.012 616.014 616.016
After the first square bracket loop, B is:
-13.621 -22.431 -31.241 -4.811 -13.621 -22.431 -31.241 -4.811
After the second square bracket loop, C is:
2.001 2.003 2.005 2.007 202.009 202.011 202.013 202.015
4.001 4.003 4.005 4.007 204.009 204.011 204.013 204.015
6.001 6.003 6.005 6.007 206.009 206.011 206.013 206.015
8.001 8.003 8.005 8.007 208.009 208.011 208.013 208.015
410.001 410.003 410.005 410.007 610.009 610.011 610.013 610.015
412.001 412.003 412.005 412.007 612.009 612.011 612.013 612.015
414.001 414.003 414.005 414.007 614.009 614.011 614.013 614.015
416.001 416.003 416.005 416.007 616.009 616.011 616.013 616.015
After the promoted call to foo(), C is:
1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08
2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08
3.01 3.02 3.03 3.04 3.05 3.06 3.07 3.08
4.01 4.02 4.03 4.04 4.05 4.06 4.07 4.08
5.01 5.02 5.03 5.04 5.05 5.06 5.07 5.08
6.01 6.02 6.03 6.04 6.05 6.06 6.07 6.08
7.01 7.02 7.03 7.04 7.05 7.06 7.07 7.08
8.01 8.02 8.03 8.04 8.05 8.06 8.07 8.08
After the equivalent zippered forall loop, C is:
1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08
2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08
3.01 3.02 3.03 3.04 3.05 3.06 3.07 3.08
4.01 4.02 4.03 4.04 4.05 4.06 4.07 4.08
5.01 5.02 5.03 5.04 5.05 5.06 5.07 5.08
6.01 6.02 6.03 6.04 6.05 6.06 6.07 6.08
7.01 7.02 7.03 7.04 7.05 7.06 7.07 7.08
8.01 8.02 8.03 8.04 8.05 8.06 8.07 8.08
Before the race-y averaging loop, D is: 1.0 4.0 9.0 16.0 25.0 36.0 49.0 64.0
Before the safe averaging loop, E is: 1.0 4.0 9.0 16.0 25.0 36.0 49.0 64.0
After the safe averaging loop, F is: 0.0 5.0 10.0 17.0 26.0 37.0 50.0 0.0
Before the third averaging loop, D is: 1.0 4.0 9.0 16.0 25.0 36.0 49.0 64.0
After the third averaging loop, D is: 1.0 5.0 9.0 17.0 25.0 37.0 49.0 64.0
The total of the integers 1..4 is 10

Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
Here's a message from one of the nested coforall tasks
After the non-distributed forall, G is: 1 2 3 4 5 6 7 8 9 10
The locales assigning to G (range version) were: 0 0 0 0 0 0 0 0 0 0
The locales assigning to G (array version) were: 0 0 0 1 1 2 2 2 3 3
The locales assigning to G (domain version) were: 0 0 0 1 1 2 2 2 3 3
The locales assigning to a slice of G were: 0 0 1 1 2 2 2 3
